[build-system]
requires = ["setuptools >= 80.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "toml-config-manager"
version = "0.1"
description = "Python configuration system using TOML files as single source of truth across multiple environments"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Ivan Borovets", email = "ivan.r.borovets@gmail.com" },
]
requires-python = ">=3.12.0"
dependencies = [
    "pydantic>=2.11.4",
    "rtoml>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "ruff>=0.11.10",
]
test = [
    "coverage>=7.8.1",
    "pytest>=8.3.5",
]

[tool.ruff]
line-length = 88
preview = true  # experimental

[tool.ruff.lint]
select = [
    "ERA001", # commented-out-code    https://docs.astral.sh/ruff/rules/#eradicate-era
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S", # flake8-bandit              https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B", # flake8-bugbear             https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A", # flake8-builtins            https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    #    "COM", # flake8-commas            https://docs.astral.sh/ruff/rules/#flake8-commas-com
    # Incompatible with ruff formatter, but can be useful (uncomment once, then review changes)
    # See: https://github.com/astral-sh/ruff/issues/9216
    "C4", # flake8-comprehensions     https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ", # flake8-datetimez         https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "LOG", # flake8-logging           https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "T20", # flake8-print             https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT", # flake8-pytest-style       https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "RSE", #flake8-raise (RSE)        https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET", #flake8-return (RET)       https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF", #flake8-self (SLF)         https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SIM", # flake8-simplify          https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SLOT", # flake8-slots            https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "TID", # flake8-tidy-imports      https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "TCH", # flake8-type-checking     https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "ARG", # flake8-unused-arguments  https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH", # flake8-use-pathlib       https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "Q", # flake8-quotes              https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "FLY", # flynt                    https://docs.astral.sh/ruff/rules/#flynt-fly
    "I", # isort                      https://docs.astral.sh/ruff/rules/#isort-i
    "C90", # mccabe                   https://docs.astral.sh/ruff/rules/#mccabe-c90
    "N", # pep8-naming                https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PERF", # Perflint                https://docs.astral.sh/ruff/rules/#perflint-perf
    "E", # pycodestyle-error          https://docs.astral.sh/ruff/rules/#error-e
    "W", # pycodestyle-warning        https://docs.astral.sh/ruff/rules/#warning-w
    "F", # pyflakes                   https://docs.astral.sh/ruff/rules/#pyflakes-f
    "PL", # pylint                    https://docs.astral.sh/ruff/rules/#pylint-pl
    "UP", # pyupgrade                 https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "RUF", # Ruff-specific rules      https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
ignore = [
    "N818", # error-suffix-on-exception-name
    "PLR0913", # too-many-arguments
    "PLR0917", # too-many-positional-arguments
    "PLR6301", # no-self-use
    "PTH123", # builtin-open
    "TC001", # typing-only-first-party-import
    "TC002", # typing-only-third-party-import
    "TC003", # typing-only-standard-library-import
    "UP015", # redundant-open-modes
]

[tool.ruff.lint.per-file-ignores]
"examples/read_config.py" = ["PLR2004", ]
"tests/**" = [
    "PLR2004", # magic-value-comparison
    "PT011", # pytest-raises-too-broad
    "S101", # assert
    "SLF001", # private-member-access
    "UP012", # unnecessary-encode-utf8
]

[tool.ruff.format]
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
split-on-trailing-comma = true

[tool.mypy]
files = [
    "config",
    "examples",
    "tests",
]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
disallow_untyped_defs = false
plugins = [
    "pydantic.mypy",
]

[tool.pytest.ini_options]
testpaths = ["tests", ]

[tool.coverage.run]
source = ["config", ]
omit = ["**/__init__.py", ]
concurrency = [
    "multiprocessing",
    "thread",
]
parallel = true
branch = true

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    '@(abc\.)?abstractmethod',
    "pass",
    '\.\.\.',
]
